{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport postService from \"../services/posts\";\nconst postSlice = createSlice({\n  name: \"posts\",\n  initialState: [],\n  reducers: {\n    setPosts(state, action) {\n      return action.payload;\n    },\n\n    appendPost(state, action) {\n      state.push(action.payload);\n    },\n\n    detachPost(state, action) {\n      const id = action.payload;\n      return state.filter(post => post._id !== id);\n    },\n\n    updateThePost(state, action) {\n      return state.map(post => post._id === action.payload._id ? action.payload : post);\n    },\n\n    likeIt(state, action) {\n      const id = action.payload;\n      const postToLike = state.find(post => post._id === id);\n      const likedPost = { ...postToLike,\n        likeCount: postToLike.likeCount + 1\n      };\n      return state.map(post => post._id === id ? likedPost : post);\n    }\n\n  }\n});\nexport const {\n  setPosts,\n  appendPost,\n  detachPost,\n  updateThePost,\n  likeIt\n} = postSlice.actions;\nexport const initialisePosts = () => {\n  return async dispatch => {\n    const posts = await postService.getAll();\n    dispatch(setPosts(posts));\n    console.log(posts);\n  };\n};\nexport const createPost = obj => {\n  return async dispatch => {\n    try {\n      if (obj.title === \"\" || obj.creator === \"\" || obj.message === \"\") {\n        console.log(\"The fields creator, title and message must be provided.\");\n        return;\n      }\n\n      const newPost = await postService.create(obj);\n      dispatch(appendPost(newPost));\n      console.log(\"Your new post was created succesfully.\");\n    } catch (error) {\n      console.log(\"Could not create the new post. You can only create a new post if you are signed in.\");\n      console.log(error);\n    }\n  };\n};\nexport const removePost = id => {\n  return async dispatch => {\n    try {\n      await postService.removeThePost(id);\n      dispatch(detachPost(id));\n      console.log(\"Your new post was deleted succesfully.\");\n    } catch (error) {\n      console.log(\"Could not delete the post. You can only delete a post if you are signed in and you were the one who created it.\");\n      console.log(error);\n    }\n  };\n};\nexport const updatePost = (setMessage, setTypeOfMessage, id, obj) => {\n  return async dispatch => {\n    try {\n      const updatedPost = await postService.update(id, obj);\n      dispatch(updateThePost(updatedPost));\n    } catch (error) {\n      console.log(\"Couldn't edit the post. You can only perform this action if you are signed in and you were the one who created the post.\");\n      console.log(error);\n    }\n  };\n};\nexport const likeAPost = (setMessage, setTypeOfMessage, id, obj) => {\n  return async dispatch => {\n    try {\n      await postService.update(id, obj);\n      dispatch(likeIt(id));\n    } catch (error) {\n      console.log(\"Couldn't like the post. You can only perform this action if you are signed in and you were the one who created the post.\");\n      console.log(error);\n    }\n  };\n};\nexport default postSlice.reducer;","map":{"version":3,"names":["createSlice","postService","postSlice","name","initialState","reducers","setPosts","state","action","payload","appendPost","push","detachPost","id","filter","post","_id","updateThePost","map","likeIt","postToLike","find","likedPost","likeCount","actions","initialisePosts","dispatch","posts","getAll","console","log","createPost","obj","title","creator","message","newPost","create","error","removePost","removeThePost","updatePost","setMessage","setTypeOfMessage","updatedPost","update","likeAPost","reducer"],"sources":["/Users/emanueleguarnaccia/memories-frontend/client/src/reducers/postReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport postService from \"../services/posts\";\n\nconst postSlice = createSlice({\n  name: \"posts\",\n  initialState: [],\n  reducers: {\n    setPosts(state, action) {\n      return action.payload;\n    },\n    appendPost(state, action) {\n      state.push(action.payload);\n    },\n    detachPost(state, action) {\n      const id = action.payload;\n      return state.filter((post) => post._id !== id);\n    },\n    updateThePost(state, action) {\n      return state.map((post) =>\n        post._id === action.payload._id ? action.payload : post\n      );\n    },\n    likeIt(state, action) {\n      const id = action.payload;\n      const postToLike = state.find((post) => post._id === id);\n      const likedPost = { ...postToLike, likeCount: postToLike.likeCount + 1 };\n      return state.map((post) => (post._id === id ? likedPost : post));\n    },\n  },\n});\n\nexport const { setPosts, appendPost, detachPost, updateThePost, likeIt } =\n  postSlice.actions;\n\nexport const initialisePosts = () => {\n  return async (dispatch) => {\n    const posts = await postService.getAll();\n    dispatch(setPosts(posts));\n    console.log(posts);\n  };\n};\n\nexport const createPost = (obj) => {\n  return async (dispatch) => {\n    try {\n      if (obj.title === \"\" || obj.creator === \"\" || obj.message === \"\") {\n        console.log(\"The fields creator, title and message must be provided.\");\n        return;\n      }\n      const newPost = await postService.create(obj);\n      dispatch(appendPost(newPost));\n      console.log(\"Your new post was created succesfully.\");\n    } catch (error) {\n      console.log(\n        \"Could not create the new post. You can only create a new post if you are signed in.\"\n      );\n      console.log(error);\n    }\n  };\n};\n\nexport const removePost = (id) => {\n  return async (dispatch) => {\n    try {\n      await postService.removeThePost(id);\n      dispatch(detachPost(id));\n      console.log(\"Your new post was deleted succesfully.\");\n    } catch (error) {\n      console.log(\n        \"Could not delete the post. You can only delete a post if you are signed in and you were the one who created it.\"\n      );\n      console.log(error);\n    }\n  };\n};\n\nexport const updatePost = (setMessage, setTypeOfMessage, id, obj) => {\n  return async (dispatch) => {\n    try {\n      const updatedPost = await postService.update(id, obj);\n      dispatch(updateThePost(updatedPost));\n    } catch (error) {\n      console.log(\n        \"Couldn't edit the post. You can only perform this action if you are signed in and you were the one who created the post.\"\n      );\n      console.log(error);\n    }\n  };\n};\n\nexport const likeAPost = (setMessage, setTypeOfMessage, id, obj) => {\n  return async (dispatch) => {\n    try {\n      await postService.update(id, obj);\n      dispatch(likeIt(id));\n    } catch (error) {\n      console.log(\n        \"Couldn't like the post. You can only perform this action if you are signed in and you were the one who created the post.\"\n      );\n      console.log(error);\n    }\n  };\n};\n\nexport default postSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}