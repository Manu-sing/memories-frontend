{"ast":null,"code":"// import { configureStore } from \"@reduxjs/toolkit\";\n// import postReducer from \"./reducers/postReducer\";\n// import idReducer from \"./reducers/idReducer\";\n// import authReducer from \"./reducers/auth\";\n// const store = configureStore({\n//   reducer: {\n//     posts: postReducer,\n//     currentId: idReducer,\n//     auth: authReducer,\n//   },\n// });\n// export default store;\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport postReducer from \"./reducers/postReducer\";\nimport idReducer from \"./reducers/idReducer\";\nimport authReducer from \"./reducers/auth\";\nimport storage from \"redux-persist/lib/storage\";\nimport { combineReducers } from \"redux\";\nimport { persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from \"redux-persist\";\nconst persistConfig = {\n  key: \"counter\",\n  storage\n};\nconst reducers = combineReducers({\n  posts: postReducer,\n  currentId: idReducer,\n  auth: authReducer\n});\nconst persistedReducer = persistReducer(persistConfig, reducers);\nexport default configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});","map":{"version":3,"names":["configureStore","postReducer","idReducer","authReducer","storage","combineReducers","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistConfig","key","reducers","posts","currentId","auth","persistedReducer","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions"],"sources":["/Users/emanueleguarnaccia/memories-frontend/client/src/store.js"],"sourcesContent":["// import { configureStore } from \"@reduxjs/toolkit\";\n// import postReducer from \"./reducers/postReducer\";\n// import idReducer from \"./reducers/idReducer\";\n// import authReducer from \"./reducers/auth\";\n\n// const store = configureStore({\n//   reducer: {\n//     posts: postReducer,\n//     currentId: idReducer,\n//     auth: authReducer,\n//   },\n// });\n\n// export default store;\n\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport postReducer from \"./reducers/postReducer\";\nimport idReducer from \"./reducers/idReducer\";\nimport authReducer from \"./reducers/auth\";\nimport storage from \"redux-persist/lib/storage\";\nimport { combineReducers } from \"redux\";\nimport {\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n\nconst persistConfig = {\n  key: \"counter\",\n  storage,\n};\n\nconst reducers = combineReducers({\n  posts: postReducer,\n  currentId: idReducer,\n  auth: authReducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nexport default configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SACEC,cADF,EAEEC,KAFF,EAGEC,SAHF,EAIEC,KAJF,EAKEC,OALF,EAMEC,KANF,EAOEC,QAPF,QAQO,eARP;AAUA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,SADe;EAEpBV;AAFoB,CAAtB;AAKA,MAAMW,QAAQ,GAAGV,eAAe,CAAC;EAC/BW,KAAK,EAAEf,WADwB;EAE/BgB,SAAS,EAAEf,SAFoB;EAG/BgB,IAAI,EAAEf;AAHyB,CAAD,CAAhC;AAMA,MAAMgB,gBAAgB,GAAGb,cAAc,CAACO,aAAD,EAAgBE,QAAhB,CAAvC;AAEA,eAAef,cAAc,CAAC;EAC5BoB,OAAO,EAAED,gBADmB;EAE5BE,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,cAAc,EAAE,CAACjB,KAAD,EAAQC,SAAR,EAAmBC,KAAnB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,QAA1C;IADC;EADA,CAAD;AAHM,CAAD,CAA7B"},"metadata":{},"sourceType":"module"}