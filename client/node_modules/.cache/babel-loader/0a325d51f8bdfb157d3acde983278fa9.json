{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  message: \"\",\n  typeOfMessage: \"\"\n};\nconst notificationSlice = createSlice({\n  name: \"notification\",\n  initialState,\n  reducers: {\n    addNotification(state, action) {\n      const message = action.payload.message;\n      const typeOfMessage = action.payload.typeOfMessage;\n      return { ...state,\n        message: message,\n        typeOfMessage: typeOfMessage\n      };\n    },\n\n    removeNotification(state) {\n      return { ...state,\n        message: \"\",\n        typeOfMessage: \"\"\n      };\n    }\n\n  }\n});\nexport const {\n  addNotification,\n  removeNotification\n} = notificationSlice.actions;\nlet startTimer;\nexport const handleNotification = (typeOfMessage, message, timer) => {\n  return async dispatch => {\n    clearTimeout(startTimer);\n    startTimer = setTimeout(() => {\n      dispatch(removeNotification());\n    }, timer);\n    dispatch(addNotification({\n      message,\n      typeOfMessage\n    }));\n  };\n};\nexport default notificationSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","message","typeOfMessage","notificationSlice","name","reducers","addNotification","state","action","payload","removeNotification","actions","startTimer","handleNotification","timer","dispatch","clearTimeout","setTimeout","reducer"],"sources":["/Users/emanueleguarnaccia/memories-frontend/client/src/reducers/notificationReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  message: \"\",\n  typeOfMessage: \"\",\n};\n\nconst notificationSlice = createSlice({\n  name: \"notification\",\n  initialState,\n  reducers: {\n    addNotification(state, action) {\n      const message = action.payload.message;\n      const typeOfMessage = action.payload.typeOfMessage;\n      return { ...state, message: message, typeOfMessage: typeOfMessage };\n    },\n    removeNotification(state) {\n      return { ...state, message: \"\", typeOfMessage: \"\" };\n    },\n  },\n});\n\nexport const { addNotification, removeNotification } =\n  notificationSlice.actions;\n\nlet startTimer;\n\nexport const handleNotification = (typeOfMessage, message, timer) => {\n  return async (dispatch) => {\n    clearTimeout(startTimer);\n    startTimer = setTimeout(() => {\n      dispatch(removeNotification());\n    }, timer);\n\n    dispatch(addNotification({ message, typeOfMessage }));\n  };\n};\n\nexport default notificationSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,EADU;EAEnBC,aAAa,EAAE;AAFI,CAArB;AAKA,MAAMC,iBAAiB,GAAGJ,WAAW,CAAC;EACpCK,IAAI,EAAE,cAD8B;EAEpCJ,YAFoC;EAGpCK,QAAQ,EAAE;IACRC,eAAe,CAACC,KAAD,EAAQC,MAAR,EAAgB;MAC7B,MAAMP,OAAO,GAAGO,MAAM,CAACC,OAAP,CAAeR,OAA/B;MACA,MAAMC,aAAa,GAAGM,MAAM,CAACC,OAAP,CAAeP,aAArC;MACA,OAAO,EAAE,GAAGK,KAAL;QAAYN,OAAO,EAAEA,OAArB;QAA8BC,aAAa,EAAEA;MAA7C,CAAP;IACD,CALO;;IAMRQ,kBAAkB,CAACH,KAAD,EAAQ;MACxB,OAAO,EAAE,GAAGA,KAAL;QAAYN,OAAO,EAAE,EAArB;QAAyBC,aAAa,EAAE;MAAxC,CAAP;IACD;;EARO;AAH0B,CAAD,CAArC;AAeA,OAAO,MAAM;EAAEI,eAAF;EAAmBI;AAAnB,IACXP,iBAAiB,CAACQ,OADb;AAGP,IAAIC,UAAJ;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAACX,aAAD,EAAgBD,OAAhB,EAAyBa,KAAzB,KAAmC;EACnE,OAAO,MAAOC,QAAP,IAAoB;IACzBC,YAAY,CAACJ,UAAD,CAAZ;IACAA,UAAU,GAAGK,UAAU,CAAC,MAAM;MAC5BF,QAAQ,CAACL,kBAAkB,EAAnB,CAAR;IACD,CAFsB,EAEpBI,KAFoB,CAAvB;IAIAC,QAAQ,CAACT,eAAe,CAAC;MAAEL,OAAF;MAAWC;IAAX,CAAD,CAAhB,CAAR;EACD,CAPD;AAQD,CATM;AAWP,eAAeC,iBAAiB,CAACe,OAAjC"},"metadata":{},"sourceType":"module"}