{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst notificationSlice = createSlice({\n  name: \"notification\",\n  initialState: {},\n  reducers: {\n    addNotification(state, action) {\n      return { ...state,\n        message: action.payload.message,\n        typeOfMessage: action.payload.typeOfMessage\n      };\n    },\n\n    removeNotification(state) {\n      return { ...state,\n        message: \"\",\n        typeOfMessage: \"\"\n      };\n    }\n\n  }\n});\nexport const {\n  addNotification,\n  removeNotification\n} = notificationSlice.actions;\nlet startTimer;\nexport const handleNotification = (obj, timer) => {\n  return async dispatch => {\n    clearTimeout(startTimer);\n    startTimer = setTimeout(() => {\n      dispatch(removeNotification());\n    }, timer);\n    dispatch(addNotification(obj));\n  };\n};\nexport default notificationSlice.reducer;","map":{"version":3,"names":["createSlice","notificationSlice","name","initialState","reducers","addNotification","state","action","message","payload","typeOfMessage","removeNotification","actions","startTimer","handleNotification","obj","timer","dispatch","clearTimeout","setTimeout","reducer"],"sources":["/Users/emanueleguarnaccia/memories-frontend/client/src/reducers/notificationReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst notificationSlice = createSlice({\n  name: \"notification\",\n  initialState: {},\n  reducers: {\n    addNotification(state, action) {\n      return {\n        ...state,\n        message: action.payload.message,\n        typeOfMessage: action.payload.typeOfMessage,\n      };\n    },\n    removeNotification(state) {\n      return { ...state, message: \"\", typeOfMessage: \"\" };\n    },\n  },\n});\n\nexport const { addNotification, removeNotification } =\n  notificationSlice.actions;\n\nlet startTimer;\n\nexport const handleNotification = (obj, timer) => {\n  return async (dispatch) => {\n    clearTimeout(startTimer);\n    startTimer = setTimeout(() => {\n      dispatch(removeNotification());\n    }, timer);\n\n    dispatch(addNotification(obj));\n  };\n};\n\nexport default notificationSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,iBAAiB,GAAGD,WAAW,CAAC;EACpCE,IAAI,EAAE,cAD8B;EAEpCC,YAAY,EAAE,EAFsB;EAGpCC,QAAQ,EAAE;IACRC,eAAe,CAACC,KAAD,EAAQC,MAAR,EAAgB;MAC7B,OAAO,EACL,GAAGD,KADE;QAELE,OAAO,EAAED,MAAM,CAACE,OAAP,CAAeD,OAFnB;QAGLE,aAAa,EAAEH,MAAM,CAACE,OAAP,CAAeC;MAHzB,CAAP;IAKD,CAPO;;IAQRC,kBAAkB,CAACL,KAAD,EAAQ;MACxB,OAAO,EAAE,GAAGA,KAAL;QAAYE,OAAO,EAAE,EAArB;QAAyBE,aAAa,EAAE;MAAxC,CAAP;IACD;;EAVO;AAH0B,CAAD,CAArC;AAiBA,OAAO,MAAM;EAAEL,eAAF;EAAmBM;AAAnB,IACXV,iBAAiB,CAACW,OADb;AAGP,IAAIC,UAAJ;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;EAChD,OAAO,MAAOC,QAAP,IAAoB;IACzBC,YAAY,CAACL,UAAD,CAAZ;IACAA,UAAU,GAAGM,UAAU,CAAC,MAAM;MAC5BF,QAAQ,CAACN,kBAAkB,EAAnB,CAAR;IACD,CAFsB,EAEpBK,KAFoB,CAAvB;IAIAC,QAAQ,CAACZ,eAAe,CAACU,GAAD,CAAhB,CAAR;EACD,CAPD;AAQD,CATM;AAWP,eAAed,iBAAiB,CAACmB,OAAjC"},"metadata":{},"sourceType":"module"}