{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport loginService from \"../services/signin\";\nimport signupService from \"../services/signup\";\nimport postService from \"../services/posts\";\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    authData: null\n  },\n  reducers: {\n    setAuth(state, action) {\n      localStorage.setItem(\"profile\", JSON.stringify({ ...(action === null || action === void 0 ? void 0 : action.payload)\n      }));\n      return { ...state,\n        authData: action === null || action === void 0 ? void 0 : action.payload\n      };\n    },\n\n    logOut(state, action) {\n      localStorage.clear();\n      return { ...state,\n        authData: null\n      };\n    }\n\n  }\n});\nexport const {\n  setAuth,\n  logOut\n} = authSlice.actions;\nexport const signin = (formData, navigate) => {\n  return async dispatch => {\n    try {\n      const user = await loginService.login(formData);\n      postService.setToken(user.token);\n      dispatch(setAuth({\n        name: user.result.name,\n        email: user.result.email,\n        token: user.token\n      }));\n      navigate(\"/\");\n    } catch (error) {\n      console.log(\"Login was unsuccessful. Try again later.\");\n      console.log(error);\n    }\n  };\n};\nexport const signup = (formData, navigate) => {\n  return async dispatch => {\n    try {\n      const user = await signupService.registration(formData);\n      postService.setToken(user.token);\n      dispatch(setAuth({\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        password: formData.password,\n        confirmPassword: formData.confirmPassword,\n        email: formData.email,\n        token: user.token\n      }));\n      navigate(\"/\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","loginService","signupService","postService","authSlice","name","initialState","authData","reducers","setAuth","state","action","localStorage","setItem","JSON","stringify","payload","logOut","clear","actions","signin","formData","navigate","dispatch","user","login","setToken","token","result","email","error","console","log","signup","registration","firstName","lastName","password","confirmPassword","reducer"],"sources":["/Users/emanueleguarnaccia/memories-frontend/client/src/reducers/auth.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport loginService from \"../services/signin\";\nimport signupService from \"../services/signup\";\nimport postService from \"../services/posts\";\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: { authData: null },\n  reducers: {\n    setAuth(state, action) {\n      localStorage.setItem(\"profile\", JSON.stringify({ ...action?.payload }));\n      return { ...state, authData: action?.payload };\n    },\n    logOut(state, action) {\n      localStorage.clear();\n      return { ...state, authData: null };\n    },\n  },\n});\n\nexport const { setAuth, logOut } = authSlice.actions;\n\nexport const signin = (formData, navigate) => {\n  return async (dispatch) => {\n    try {\n      const user = await loginService.login(formData);\n      postService.setToken(user.token);\n      dispatch(\n        setAuth({\n          name: user.result.name,\n          email: user.result.email,\n          token: user.token,\n        })\n      );\n      navigate(\"/\");\n    } catch (error) {\n      console.log(\"Login was unsuccessful. Try again later.\");\n      console.log(error);\n    }\n  };\n};\n\nexport const signup = (formData, navigate) => {\n  return async (dispatch) => {\n    try {\n      const user = await signupService.registration(formData);\n      postService.setToken(user.token);\n      dispatch(\n        setAuth({\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          password: formData.password,\n          confirmPassword: formData.confirmPassword,\n          email: formData.email,\n          token: user.token,\n        })\n      );\n      navigate(\"/\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport default authSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC5BK,IAAI,EAAE,MADsB;EAE5BC,YAAY,EAAE;IAAEC,QAAQ,EAAE;EAAZ,CAFc;EAG5BC,QAAQ,EAAE;IACRC,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;MACrBC,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCC,IAAI,CAACC,SAAL,CAAe,EAAE,IAAGJ,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEK,OAAX;MAAF,CAAf,CAAhC;MACA,OAAO,EAAE,GAAGN,KAAL;QAAYH,QAAQ,EAAEI,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEK;MAA9B,CAAP;IACD,CAJO;;IAKRC,MAAM,CAACP,KAAD,EAAQC,MAAR,EAAgB;MACpBC,YAAY,CAACM,KAAb;MACA,OAAO,EAAE,GAAGR,KAAL;QAAYH,QAAQ,EAAE;MAAtB,CAAP;IACD;;EARO;AAHkB,CAAD,CAA7B;AAeA,OAAO,MAAM;EAAEE,OAAF;EAAWQ;AAAX,IAAsBb,SAAS,CAACe,OAAtC;AAEP,OAAO,MAAMC,MAAM,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;EAC5C,OAAO,MAAOC,QAAP,IAAoB;IACzB,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMvB,YAAY,CAACwB,KAAb,CAAmBJ,QAAnB,CAAnB;MACAlB,WAAW,CAACuB,QAAZ,CAAqBF,IAAI,CAACG,KAA1B;MACAJ,QAAQ,CACNd,OAAO,CAAC;QACNJ,IAAI,EAAEmB,IAAI,CAACI,MAAL,CAAYvB,IADZ;QAENwB,KAAK,EAAEL,IAAI,CAACI,MAAL,CAAYC,KAFb;QAGNF,KAAK,EAAEH,IAAI,CAACG;MAHN,CAAD,CADD,CAAR;MAOAL,QAAQ,CAAC,GAAD,CAAR;IACD,CAXD,CAWE,OAAOQ,KAAP,EAAc;MACdC,OAAO,CAACC,GAAR,CAAY,0CAAZ;MACAD,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD;EACF,CAhBD;AAiBD,CAlBM;AAoBP,OAAO,MAAMG,MAAM,GAAG,CAACZ,QAAD,EAAWC,QAAX,KAAwB;EAC5C,OAAO,MAAOC,QAAP,IAAoB;IACzB,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMtB,aAAa,CAACgC,YAAd,CAA2Bb,QAA3B,CAAnB;MACAlB,WAAW,CAACuB,QAAZ,CAAqBF,IAAI,CAACG,KAA1B;MACAJ,QAAQ,CACNd,OAAO,CAAC;QACN0B,SAAS,EAAEd,QAAQ,CAACc,SADd;QAENC,QAAQ,EAAEf,QAAQ,CAACe,QAFb;QAGNC,QAAQ,EAAEhB,QAAQ,CAACgB,QAHb;QAINC,eAAe,EAAEjB,QAAQ,CAACiB,eAJpB;QAKNT,KAAK,EAAER,QAAQ,CAACQ,KALV;QAMNF,KAAK,EAAEH,IAAI,CAACG;MANN,CAAD,CADD,CAAR;MAUAL,QAAQ,CAAC,GAAD,CAAR;IACD,CAdD,CAcE,OAAOQ,KAAP,EAAc;MACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD;EACF,CAlBD;AAmBD,CApBM;AAsBP,eAAe1B,SAAS,CAACmC,OAAzB"},"metadata":{},"sourceType":"module"}